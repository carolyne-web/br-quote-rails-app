<!-- app/views/quotations/new.html.erb -->
<div class="min-h-screen bg-gray-50 flex" data-controller="quotation-form">
  <%= form_with model: @quotation, local: true, class: "w-full flex" do |f| %>
    <!-- Sidebar -->
    <aside class="w-64 bg-white shadow-lg flex flex-col sticky top-0 h-screen p-4 justify-between shadow rounded-2xl">
      <div class="flex-1 overflow-y-auto">
        <h2 class="text-lg font-semibold mb-4">Quote Sections</h2>
        <ul class="space-y-2 text-sm text-gray-700">
          <li class="font-medium text-blue-600 cursor-pointer" data-section="project-info">Campaign Information</li>
          <li class="cursor-pointer hover:text-blue-600" data-section="talent-categories">Talent Categories</li>
          <li class="cursor-pointer hover:text-blue-600" data-section="licensing">Usage & Licensing</li>
          <li class="cursor-pointer hover:text-blue-600" data-section="guarantee">Guarantee & Final</li>
        </ul>
      </div>
      <div class="border-t pt-4 flex-shrink-0 hidden">
        <p class="text-sm text-gray-500">Current Total</p>
        <p class="text-2xl font-bold" id="current-total">R 0.00</p>
      </div>
    </aside>

    <!-- Main Content -->
    <main class="flex-1 space-y-4 px-4">
      
      <!-- Error Messages -->
      <% if @quotation.errors.any? %>
        <div class="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg">
          <h3 class="font-semibold mb-2">Please correct the following errors:</h3>
          <ul class="list-disc list-inside">
            <% @quotation.errors.full_messages.each do |message| %>
              <li><%= message %></li>
            <% end %>
          </ul>
        </div>
      <% end %>
      
      <!-- Project Information -->
      <section id="project-info" class="bg-white shadow rounded-2xl p-4">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-semibold">Campaign Information</h3>
          <span class="text-sm text-gray-400">Step 1 of 4</span>
        </div>
        
        <div class="mb-4">
          <%= f.label :campaign_name, "Campaign Name", class: "block text-sm font-medium text-gray-600" %>
          <%= f.text_field :campaign_name, required: true, class: "w-full mt-1 border rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500", placeholder: "Enter campaign name" %>
        </div>

        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-600 mb-3">Product Type</label>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
            <label class="flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
              <%= f.radio_button :product_type, 'adult', class: "text-blue-600 focus:ring-blue-500" %>
              <span class="text-sm font-medium">Adult Product</span>
            </label>
            <label class="flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
              <%= f.radio_button :product_type, 'kids', class: "text-blue-600 focus:ring-blue-500" %>
              <span class="text-sm font-medium">Kids Product</span>
            </label>
            <label class="flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
              <%= f.radio_button :product_type, 'family', class: "text-blue-600 focus:ring-blue-500" %>
              <span class="text-sm font-medium">Family Product</span>
            </label>
          </div>
        </div>

        <div class="hidden">
          <%= f.label :status, "Status", class: "block text-sm font-medium text-gray-600" %>
          <%= f.select :status, options_for_select(Quotation::STATUS_OPTIONS.map { |s| [s.capitalize, s] }, @quotation.status), {}, class: "w-full mt-1 border rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500" %>
        </div>
      </section>

      <!-- Talent Categories -->
      <section id="talent-categories" class="bg-white shadow rounded-2xl p-4">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-semibold">Select Talent Categories</h3>
          <span class="text-sm text-gray-400">Step 2 of 4</span>
        </div>
        
        <!-- Talent Category Buttons -->
        <div class="mb-4">
          <div class="flex flex-wrap gap-2">
            <% TalentCategory::TYPES.each do |type_id, type_name| %>
              <button type="button" class="talent-btn flex items-center px-4 py-2 border-2 border-gray-300 rounded-lg hover:bg-blue-50 hover:border-blue-300 transition-colors text-sm font-medium whitespace-nowrap cursor-pointer" data-category="<%= type_id %>">
                <span class="text-sm font-bold mr-2 text-blue-600"><%= TalentCategory.new(category_type: type_id).icon %></span>
                <span><%= type_name %></span>
              </button>
            <% end %>
          </div>
        </div>
        
        <!-- Selected Talent Categories -->
    <div class="selected-talent-categories">
    <% TalentCategory::TYPES.each do |type_id, type_name| %>
      <div class="talent-category-section hidden mb-8 p-6 bg-gray-50 rounded-lg border-l-4 border-blue-500" id="talent-category-<%= type_id %>">
        <div class="flex items-center justify-between mb-6">
          <div class="flex items-center">
            <span class="text-2xl mr-3"><%= TalentCategory.new(category_type: type_id).icon %></span>
            <div>
              <h4 class="font-bold text-xl text-gray-900"><%= type_name %></h4>
              
            </div>
          </div>
          <button type="button" class="px-3 py-2 text-sm text-red-600 hover:text-red-800 hover:bg-red-50 rounded-lg transition-colors" onclick="removeTalentCategory(<%= type_id %>)">
            Remove Category
          </button>
        </div>
        
        <!-- Horizontal Input Layout -->
        <div class="talent-input-grid mb-6">
          <!-- Column Headers -->
          <div class="grid grid-cols-9 gap-2 mb-3">
            <div class="text-xs font-semibold text-gray-700 text-center">Talent</div>
            <div class="text-xs font-semibold text-gray-700 text-center">Rate +/-</div>
            <div class="text-xs font-semibold text-gray-700 text-center">Shoot Days</div>
            <div class="text-xs font-semibold text-gray-700 text-center">Rehearsal</div>
            <div class="text-xs font-semibold text-gray-700 text-center">Down Days</div>
            <div class="text-xs font-semibold text-gray-700 text-center">Travel Days</div>
            <div class="text-xs font-semibold text-gray-700 text-center">Overtime</div>
            <div class="text-xs font-semibold text-gray-700 text-center"></div>
            <div class="text-xs font-semibold text-gray-700 text-center"></div>
          </div>
          
          <!-- First Input Row -->
          <div class="talent-input-row grid grid-cols-9 gap-2 mb-2">
            <!-- Talent Count -->
            <div>
              <%= number_field_tag "talent[#{type_id}][talent_count]", 0, 
                  min: 0, max: 99,
                  class: "w-full px-2 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-center",
                  data: { talent_input: type_id } %>
            </div>

              <!-- Rate Adjustment -->
            <div>
              <%= number_field_tag "talent[#{type_id}][adjusted_rate]", 
                      TalentCategory.new(category_type: type_id).default_daily_rate,
                  step: 500,
                  class: "w-full px-2 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-center",
                  data: { adjusted_rate_input: type_id },
                  title: "Full adjusted rate" %>
            </div>

            <!-- Days Count -->
            <div>
              <%= number_field_tag "talent[#{type_id}][days_count]", 1, 
                  min: 1,
                  class: "w-full px-2 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-center",
                  data: { days_input: type_id } %>
            </div>
            
            <!-- Rehearsal Days (50% rate) -->
            <div>
              <%= number_field_tag "talent[#{type_id}][rehearsal_days]", 0, 
                  min: 0,
                  class: "w-full px-2 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-center",
                  data: { rehearsal_input: type_id },
                  title: "50% of day rate" %>
            </div>
            
            <!-- Down Days (50% rate) -->
            <div>
              <%= number_field_tag "talent[#{type_id}][down_days]", 0, 
                  min: 0,
                  class: "w-full px-2 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-center",
                  data: { down_input: type_id },
                  title: "50% of day rate" %>
            </div>
            
            <!-- Travel Days (50% rate) -->
            <div>
              <%= number_field_tag "talent[#{type_id}][travel_days]", 0, 
                  min: 0,
                  class: "w-full px-2 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-center",
                  data: { travel_input: type_id },
                  title: "50% of day rate" %>
            </div>
            
            <!-- Overtime Hours (10% per hour) -->
            <div>
              <%= number_field_tag "talent[#{type_id}][overtime_hours]", 0, 
                  min: 0, step: 0.5,
                  class: "w-full px-2 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-center",
                  data: { overtime_input: type_id },
                  title: "10% of day rate per hour" %>
            </div>
            
            <!-- Night Button -->
            <div class="flex flex-col items-center">
              <button type="button" 
                      class="night-btn w-full px-2 py-2 text-xs border-2 border-gray-300 rounded-lg hover:bg-yellow-50 hover:border-yellow-300 transition-colors font-medium mb-1"
                      data-category="<%= type_id %>"
                      data-active="false"
                      title="Night shoot calculation">
                + Night Fee
              </button>
              <input type="number" 
                     name="talent[<%= type_id %>][night_count]" 
                     min="1" 
                     value="1" 
                     class="nights-input w-full px-1 py-1 text-xs border border-gray-300 rounded text-center hidden"
                     data-category="<%= type_id %>"
                     placeholder="Nights">
              <%= hidden_field_tag "talent[#{type_id}][night_premium]", "false", data: { night_field: type_id } %>
            </div>
            
            <!-- Action Button - Add Line -->
            <div>
              <button type="button" 
                      class="add-line-btn w-full text-xs text-blue-600 rounded-lg font-medium"
                      data-category="<%= type_id %>"
                      title="Add another talent line">
                + Line
              </button>
            </div>
          </div>
          
          <!-- Additional Lines Container -->
          <div class="additional-lines" data-category="<%= type_id %>">
            <!-- Additional talent lines will be added here -->
          </div>
        </div>
        <!-- Category Total Display -->
        <div class="category-total p-4 bg-blue-50 rounded-lg">
          <div class="flex justify-between items-center">
            <span class="font-semibold text-gray-900">Category Total:</span>
            <span class="text-lg font-bold text-blue-600" id="category-total-<%= type_id %>">R0</span>
          </div>
          
        </div>
      </div>
    <% end %>
  </div>
  
  <!-- Talent Category Totals -->
  <div id="category-totals" class="mt-6 bg-blue-50 rounded-lg p-4 border border-blue-200">
    <h4 class="text-lg font-semibold mb-3 text-gray-800">Category Summary</h4>
    <div id="category-totals-list" class="space-y-2">
      <!-- Category totals will be populated by JavaScript -->
    </div>
    <div class="border-t border-blue-200 mt-4 pt-4">
      <div class="flex justify-between items-center">
        <span class="font-semibold text-gray-800 hidden">Total (without days):</span>
        <span class="text-xl font-bold text-blue-600 hidden" id="talent-base-total">R0</span>
      </div>
      <div class="flex justify-between items-center">
        <span class="font-semibold text-gray-800">Total A: Talent Day Fees</span>
        <span class="text-xl font-bold text-blue-600" id="talent-grand-total">R0</span>
      </div>
    </div>
  </div>
</section>



      <!-- Usage & Licensing -->
      <%= fields_for :quotation_detail, @quotation.quotation_detail || @quotation.build_quotation_detail do |detail_fields| %>
        <!-- Hidden field to maintain form compatibility -->
        <%= detail_fields.hidden_field :shoot_days, value: 1 %>
        <section id="licensing" class="bg-white shadow rounded-2xl p-4">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold">Usage & Licensing</h3>
            <span class="text-sm text-gray-400">Step 3 of 4</span>
          </div>
          
          <!-- Territory Combinations Tabs -->
          <div class="mb-4">
            <div class="flex items-center space-x-2 border-b border-gray-200">
              <div id="combination-tabs" class="flex space-x-2">
                <button type="button" class="combination-tab px-4 py-2 border-b-2 border-blue-500 text-blue-600 font-medium text-sm" data-combo="1">
                  Combo 1
                </button>
              </div>
              <button type="button" id="add-combination" class="ml-2 px-3 py-1 text-sm text-blue-600 hover:text-blue-800 border border-blue-300 rounded-lg hover:bg-blue-50 transition-colors">
                + Add Combination
              </button>
            </div>
          </div>

          <!-- Territory Combinations Content -->
          <div id="combinations-content">
            <!-- Combination 1 -->
            <div class="combination-content active" data-combo="1">
              <div class="space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label class="block text-sm font-medium text-gray-600" for="combination_1_duration">Contract Duration</label>
                    <select name="combinations[1][duration]" id="combination_1_duration" class="w-full mt-1 border rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 combination-duration" data-combo="1">
                      <option value="">Select Contract Duration</option>
                      <option value="3_months">Up to 3 Months</option>
                      <option value="6_months">Up to 6 Months</option>
                      <option value="12_months">12 Months</option>
                      <option value="18_months">18 Months</option>
                      <option value="24_months">2 Years</option>
                      <option value="36_months">36 Months</option>
                    </select>
                  </div>
                </div>

                <!-- Territory Selection for this Combination -->
                <div>
                  <label class="block text-sm font-medium text-gray-600 mb-3">Select Territories for Combo 1</label>
                  
                  <!-- Selected Territory Tags -->
                  <div class="mb-4">
                    <div class="selected-territory-tags flex flex-wrap gap-2" data-combo="1">
                      <!-- Selected territory tags will appear here -->
                    </div>
                  </div>
                  
                  <div class="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
                    <div class="text-sm text-blue-800">
                      <strong>Territory Logic:</strong> Multiple territories are additive. Example: East Europe (400%) + Pan African (400%) = 800% total.
                    </div>
                  </div>
                  
                  <!-- Search Bar -->
                  <div class="mb-4">
                    <input type="text" class="territory-search w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" data-combo="1" placeholder="Search territories (type 3+ letters)...">
                  </div>
                  
                  <!-- Territories List -->
                  <div class="max-h-80 overflow-y-auto border border-gray-200 rounded-lg">
                    <div class="territories-list space-y-1 p-2" data-combo="1">
                      <% @territories.group_by(&:group_name).each do |group_name, territories| %>
                        <% territories.each do |territory| %>
                          <label class="territory-item flex items-center justify-between p-3 border-b border-gray-100 hover:bg-gray-50 cursor-pointer" data-name="<%= territory.name.downcase %>">
                            <div class="flex items-center">
                              <input type="checkbox" name="combinations[1][territories][]" value="<%= territory.id %>" class="mr-3 rounded text-blue-600 focus:ring-blue-500 combination-territory-checkbox" data-territory-id="<%= territory.id %>" data-territory-name="<%= territory.name %>" data-percentage="<%= territory.percentage %>" data-combo="1">
                              <div class="text-sm">
                                <div class="font-medium text-gray-900"><%= territory.name %></div>
                                <div class="text-xs text-gray-500"><%= group_name %></div>
                              </div>
                            </div>
                            <div class="text-sm font-medium text-blue-600"><%= territory.percentage %>%</div>
                          </label>
                        <% end %>
                      <% end %>
                    </div>
                  </div>
                </div>

                <div>
                  <label class="block text-sm font-medium text-gray-600 mb-3">Select Media Type(s)</label>
                  <div class="grid grid-cols-1 md:grid-cols-2 gap-3 mb-3">
                    <label class="flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
                      <input type="checkbox" name="combinations[1][media_types][]" value="all_media" class="mr-3 rounded text-blue-600 focus:ring-blue-500 combination-media" data-combo="1">
                      <span class="text-sm font-medium">All Media</span>
                    </label>
                    <label class="flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
                      <input type="checkbox" name="combinations[1][media_types][]" value="all_moving" class="mr-3 rounded text-blue-600 focus:ring-blue-500 combination-media" data-combo="1">
                      <span class="text-sm font-medium">All Moving Media</span>
                    </label>
                    <label class="flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
                      <input type="checkbox" name="combinations[1][media_types][]" value="internet" class="mr-3 rounded text-blue-600 focus:ring-blue-500 combination-media" data-combo="1">
                      <span class="text-sm font-medium">Internet Only</span>
                    </label>
                    <label class="flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
                      <input type="checkbox" name="combinations[1][media_types][]" value="cinema" class="mr-3 rounded text-blue-600 focus:ring-blue-500 combination-media" data-combo="1">
                      <span class="text-sm font-medium">Cinema Only</span>
                    </label>
                    <label class="flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
                      <input type="checkbox" name="combinations[1][media_types][]" value="tv" class="mr-3 rounded text-blue-600 focus:ring-blue-500 combination-media" data-combo="1">
                      <span class="text-sm font-medium">TV Only</span>
                    </label>
                    <label class="flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
                      <input type="checkbox" name="combinations[1][media_types][]" value="print" class="mr-3 rounded text-blue-600 focus:ring-blue-500 combination-media" data-combo="1">
                      <span class="text-sm font-medium">All Print Media</span>
                    </label>
                  </div>
                  
                  <div class="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
                    <div class="text-sm text-blue-800">
                      <strong>Media Multiplier Logic:</strong> All Media = 100%, All Moving Media alone = 75%, All Moving Media + 1 other = 75%, 1 other media = 50%, 3+ media = 100%
                    </div>
                    <div class="text-xs text-blue-600 mt-1">
                      Current multiplier: <span class="media-multiplier-display" data-combo="1">100%</span>
                    </div>
                  </div>
                </div>
                
                <!-- Exclusivity Section -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label class="block text-sm font-medium text-gray-600" for="combination_1_exclusivity">Exclusivity Level</label>
                    <select name="combinations[1][exclusivity_type]" id="combination_1_exclusivity" class="w-full mt-1 border rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 combination-exclusivity" data-combo="1">
                      <option value="">Select exclusivity type</option>
                      <% @exclusivity_options.each do |option| %>
                        <option value="<%= option[1] %>"><%= option[0] %></option>
                      <% end %>
                    </select>
                  </div>
                </div>
                
                <div class="space-y-2">
                  <label class="flex items-center p-2 border rounded-lg hover:bg-gray-50 cursor-pointer">
                    <input type="checkbox" name="combinations[1][unlimited_stills]" value="1" class="mr-3 rounded text-blue-600 focus:ring-blue-500 combination-unlimited-stills" data-combo="1">
                    <span class="text-sm">Unlimited Stills (+15%)</span>
                  </label>
                  <label class="flex items-center p-2 border rounded-lg hover:bg-gray-50 cursor-pointer">
                    <input type="checkbox" name="combinations[1][unlimited_versions]" value="1" class="mr-3 rounded text-blue-600 focus:ring-blue-500 combination-unlimited-versions" data-combo="1">
                    <span class="text-sm">Unlimited Versions (+15%)</span>
                  </label>
                </div>
              </div>
            </div>
          </div>
        </section>
      <% end %>

      <!-- Guarantee & Manual Adjustments -->
      <section id="guarantee" class="bg-white shadow rounded-2xl p-4">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-semibold">Guarantee & Manual Adjustments</h3>
          <span class="text-sm text-gray-400">Step 4 of 4</span>
        </div>
        
        <!-- Guarantee Option -->
        <div class="mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
          <label class="flex items-center">
            <%= f.check_box :is_guaranteed, class: "mr-3 rounded text-blue-600 focus:ring-blue-500" %>
            <span class="text-sm font-medium">Apply 25% Guarantee Discount?</span>
          </label>
          <div class="text-xs text-gray-600 mt-2">
            When selected, the final quote will be reduced by 25% as a guarantee discount.
          </div>
        </div>
        
        <!-- Manual Adjustments -->
        <div class="manual-adjustments">
          <h4 class="text-md font-medium text-gray-700 mb-3">Manual Adjustments</h4>
          <div class="mb-3">
            <button type="button" class="text-sm text-blue-600 hover:text-blue-800 add-adjustment">
              + Add Adjustment
            </button>
          </div>
          <div id="adjustments-container">
            <!-- Manual adjustments will be added here dynamically -->
          </div>
        </div>
      </section>

      <!-- Quote Preview -->
      <section class="bg-white shadow rounded-2xl p-4">
        <h3 class="text-lg font-semibold mb-4">Quote Preview</h3>
        
        <div class="bg-gray-50 rounded-lg p-4 mb-6">
          <div class="grid grid-cols-2 gap-6">
            <!-- Talent Summary -->
            <div>
              <h4 class="text-sm font-medium text-gray-600 mb-3">Talent Summary</h4>
              <div id="talent-summary" class="space-y-2 text-sm">
                <div class="text-gray-500 italic">No talent selected</div>
              </div>
            </div>
            
            <!-- Territory Summary -->
            <div>
              <h4 class="text-sm font-medium text-gray-600 mb-3">Selected Territories</h4>
              <div id="territory-summary" class="space-y-1 text-sm max-h-32 overflow-y-auto">
                <div class="text-gray-500 italic">No territories selected</div>
              </div>
            </div>
          </div>
          
          <!-- Cost Breakdown -->
          <div class="mt-6 pt-4 border-t border-gray-200">
            <div class="space-y-2">
              <!-- A: Talent Fees -->
              <div class="bg-gray-50 p-3 rounded-lg">
                <div class="flex justify-between text-sm font-medium">
                  <span class="text-gray-700">A) Talent Fees:</span>
                  <span id="talent-total">R 0.00</span>
                </div>
                <div class="text-xs text-gray-500 mt-1">Base talent fees + standby & overtime</div>
              </div>
              
              <!-- Usage/Buyout Calculation Details -->
              <div class="space-y-1 text-xs text-gray-600 ml-2">
                <div class="flex justify-between">
                  <span>Territory Multiplier:</span>
                  <span id="territory-multiplier">1.00x</span>
                </div>
                <div class="flex justify-between">
                  <span>Media Multiplier:</span>
                  <span id="media-display-multiplier">1.00x</span>
                </div>
                <div class="flex justify-between">
                  <span>Duration Multiplier:</span>
                  <span id="duration-multiplier">1.00x</span>
                </div>
                <div class="flex justify-between">
                  <span>Exclusivity Adjustment:</span>
                  <span id="exclusivity-multiplier">+0%</span>
                </div>
              </div>
              
              <!-- B: Usage/Buyout -->
              <div class="bg-blue-50 p-3 rounded-lg">
                <div class="flex justify-between text-sm font-medium mb-2">
                  <span class="text-gray-700">B) Usage/Buyout:</span>
                  <span id="usage-buyout-total">R 0.00</span>
                </div>
                <div id="usage-buyout-breakdown" class="text-xs text-gray-600 space-y-1">
                  <!-- Category breakdowns will be inserted here -->
                </div>
              </div>
              
              <!-- Additional Options -->
              <div class="flex justify-between text-sm">
                <span class="text-gray-600">Additional Options:</span>
                <span id="additional-fees">R 0.00</span>
              </div>
              
              <!-- C: Total -->
              <div class="bg-green-50 p-3 rounded-lg border-t border-gray-300">
                <div class="flex justify-between font-semibold">
                  <span class="text-gray-800">C) Total Quote (A+B):</span>
                  <span id="total-quote" class="text-blue-600">R 0.00</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- Form Actions -->
      <div class="bg-white rounded-2xl p-4 shadow">
        <div class="flex flex-col space-y-3 sm:flex-row sm:space-y-0 sm:space-x-3 sm:justify-end">
          <%= link_to "Cancel", quotations_path, 
              class: "px-6 py-2 border border-gray-300 rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition text-center" %>
          <%= button_tag "Save as Draft", type: "button", 
              class: "px-6 py-2 border border-blue-300 bg-blue-50 text-blue-700 rounded-lg hover:bg-blue-100 transition",
              onclick: "saveDraft()" %>
          <%= f.submit "Generate Final Quote", 
              class: "px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition" %>
        </div>
      </div>
    </main>
  <% end %>
</div>


<script>
document.addEventListener('DOMContentLoaded', function() {
  // Sidebar navigation
  const sidebarItems = document.querySelectorAll('[data-section]');
  const sections = document.querySelectorAll('section[id]');
  
  sidebarItems.forEach(item => {
    item.addEventListener('click', function() {
      const targetSection = document.getElementById(this.dataset.section);
      if (targetSection) {
        targetSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
        
        // Update active sidebar item
        sidebarItems.forEach(i => {
          i.classList.remove('font-medium', 'text-blue-600');
          i.classList.add('text-gray-700');
        });
        this.classList.add('font-medium', 'text-blue-600');
        this.classList.remove('text-gray-700');
      }
    });
  });

  // Territory Combinations Management
  let nextComboId = 2;
  
  // Tab switching functionality
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('combination-tab')) {
      const comboId = e.target.getAttribute('data-combo');
      switchToCombination(comboId);
    }
  });
  
  function switchToCombination(comboId) {
    // Update tab styles
    document.querySelectorAll('.combination-tab').forEach(tab => {
      tab.classList.remove('border-blue-500', 'text-blue-600', 'font-medium');
      tab.classList.add('border-transparent', 'text-gray-500');
    });
    
    const activeTab = document.querySelector(`[data-combo="${comboId}"].combination-tab`);
    if (activeTab) {
      activeTab.classList.add('border-blue-500', 'text-blue-600', 'font-medium');
      activeTab.classList.remove('border-transparent', 'text-gray-500');
    }
    
    // Update content visibility
    document.querySelectorAll('.combination-content').forEach(content => {
      content.classList.remove('active');
      content.style.display = 'none';
    });
    
    const activeContent = document.querySelector(`[data-combo="${comboId}"].combination-content`);
    if (activeContent) {
      activeContent.classList.add('active');
      activeContent.style.display = 'block';
    }
  }
  
  // Add new combination functionality
  document.getElementById('add-combination').addEventListener('click', function() {
    const newComboId = nextComboId++;
    
    // Add new tab
    const tabsContainer = document.getElementById('combination-tabs');
    const newTab = document.createElement('button');
    newTab.type = 'button';
    newTab.className = 'combination-tab px-4 py-2 border-b-2 border-transparent text-gray-500 text-sm hover:text-blue-600';
    newTab.setAttribute('data-combo', newComboId);
    newTab.textContent = `Combo ${newComboId}`;
    
    // Add remove button directly to the tab
    newTab.innerHTML = `Combo ${newComboId} <span class="ml-2 text-red-500 hover:text-red-700" onclick="event.stopPropagation(); removeCombination(${newComboId});">×</span>`;
    
    tabsContainer.appendChild(newTab);
    
    // Add new content
    const contentContainer = document.getElementById('combinations-content');
    const newContent = createCombinationContent(newComboId);
    contentContainer.appendChild(newContent);
    
    // Switch to new combination
    switchToCombination(newComboId);
    
    // Update quote preview
    updateQuotePreview();
  });
  
  function removeCombination(comboId) {
    if (comboId == 1) return; // Cannot remove combo 1
    
    // Remove tab
    const tab = document.querySelector(`button[data-combo="${comboId}"]`);
    if (tab) {
      tab.remove();
    }
    
    // Remove content
    const content = document.querySelector(`div[data-combo="${comboId}"].combination-content`);
    if (content) {
      content.remove();
    }
    
    // Switch to combo 1 if the removed combo was active
    const activeTab = document.querySelector('.combination-tab.border-blue-500');
    if (!activeTab) {
      switchToCombination(1);
    }
    
    // Update quote preview
    updateQuotePreview();
  }
  
  // Make removeCombination available globally
  window.removeCombination = removeCombination;
  
  function createCombinationContent(comboId) {
    const content = document.createElement('div');
    content.className = 'combination-content';
    content.setAttribute('data-combo', comboId);
    content.style.display = 'none';
    
    content.innerHTML = `
      <div class="space-y-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-600" for="combination_${comboId}_duration">Contract Duration</label>
            <select name="combinations[${comboId}][duration]" id="combination_${comboId}_duration" class="w-full mt-1 border rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 combination-duration" data-combo="${comboId}">
              <option value="">Select Contract Duration</option>
              <option value="3_months">Up to 3 Months</option>
              <option value="6_months">Up to 6 Months</option>
              <option value="12_months">12 Months</option>
              <option value="18_months">18 Months</option>
              <option value="24_months">2 Years</option>
              <option value="36_months">36 Months</option>
            </select>
          </div>
        </div>

        <!-- Territory Selection for this Combination -->
        <div>
          <label class="block text-sm font-medium text-gray-600 mb-3">Select Territories for Combo ${comboId}</label>
          
          <!-- Selected Territory Tags -->
          <div class="mb-4">
            <div class="selected-territory-tags flex flex-wrap gap-2" data-combo="${comboId}">
              <!-- Selected territory tags will appear here -->
            </div>
          </div>
          
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
            <div class="text-sm text-blue-800">
              <strong>Territory Logic:</strong> Multiple territories are additive. Example: East Europe (400%) + Pan African (400%) = 800% total.
            </div>
          </div>
          
          <!-- Search Bar -->
          <div class="mb-4">
            <input type="text" class="territory-search w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" data-combo="${comboId}" placeholder="Search territories (type 3+ letters)...">
          </div>
          
          <!-- Territories List -->
          <div class="max-h-80 overflow-y-auto border border-gray-200 rounded-lg">
            <div class="territories-list space-y-1 p-2" data-combo="${comboId}">
              <% @territories.group_by(&:group_name).each do |group_name, territories| %>
                <% territories.each do |territory| %>
                  <label class="territory-item flex items-center justify-between p-3 border-b border-gray-100 hover:bg-gray-50 cursor-pointer" data-name="<%= territory.name.downcase %>">
                    <div class="flex items-center">
                      <input type="checkbox" name="combinations[${comboId}][territories][]" value="<%= territory.id %>" class="mr-3 rounded text-blue-600 focus:ring-blue-500 combination-territory-checkbox" data-territory-id="<%= territory.id %>" data-territory-name="<%= territory.name %>" data-percentage="<%= territory.percentage %>" data-combo="${comboId}">
                      <div class="text-sm">
                        <div class="font-medium text-gray-900"><%= territory.name %></div>
                        <div class="text-xs text-gray-500"><%= group_name %></div>
                      </div>
                    </div>
                    <div class="text-sm font-medium text-blue-600"><%= territory.percentage %>%</div>
                  </label>
                <% end %>
              <% end %>
            </div>
          </div>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-600 mb-3">Select Media Type(s)</label>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-3 mb-3">
            <label class="flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
              <input type="checkbox" name="combinations[${comboId}][media_types][]" value="all_media" class="mr-3 rounded text-blue-600 focus:ring-blue-500 combination-media" data-combo="${comboId}">
              <span class="text-sm font-medium">All Media</span>
            </label>
            <label class="flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
              <input type="checkbox" name="combinations[${comboId}][media_types][]" value="all_moving" class="mr-3 rounded text-blue-600 focus:ring-blue-500 combination-media" data-combo="${comboId}">
              <span class="text-sm font-medium">All Moving Media</span>
            </label>
            <label class="flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
              <input type="checkbox" name="combinations[${comboId}][media_types][]" value="internet" class="mr-3 rounded text-blue-600 focus:ring-blue-500 combination-media" data-combo="${comboId}">
              <span class="text-sm font-medium">Internet Only</span>
            </label>
            <label class="flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
              <input type="checkbox" name="combinations[${comboId}][media_types][]" value="cinema" class="mr-3 rounded text-blue-600 focus:ring-blue-500 combination-media" data-combo="${comboId}">
              <span class="text-sm font-medium">Cinema Only</span>
            </label>
            <label class="flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
              <input type="checkbox" name="combinations[${comboId}][media_types][]" value="tv" class="mr-3 rounded text-blue-600 focus:ring-blue-500 combination-media" data-combo="${comboId}">
              <span class="text-sm font-medium">TV Only</span>
            </label>
            <label class="flex items-center space-x-2 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
              <input type="checkbox" name="combinations[${comboId}][media_types][]" value="print" class="mr-3 rounded text-blue-600 focus:ring-blue-500 combination-media" data-combo="${comboId}">
              <span class="text-sm font-medium">All Print Media</span>
            </label>
          </div>
          
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
            <div class="text-sm text-blue-800">
              <strong>Media Multiplier Logic:</strong> All Media = 100%, All Moving Media alone = 75%, All Moving Media + 1 other = 75%, 1 other media = 50%, 3+ media = 100%
            </div>
            <div class="text-xs text-blue-600 mt-1">
              Current multiplier: <span class="media-multiplier-display" data-combo="${comboId}">100%</span>
            </div>
          </div>
        </div>
        
        <!-- Exclusivity Section -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-600" for="combination_${comboId}_exclusivity">Exclusivity Level</label>
            <select name="combinations[${comboId}][exclusivity_type]" id="combination_${comboId}_exclusivity" class="w-full mt-1 border rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 combination-exclusivity" data-combo="${comboId}">
              <option value="">Select exclusivity type</option>
              <% @exclusivity_options.each do |option| %>
                <option value="<%= option[1] %>"><%= option[0] %></option>
              <% end %>
            </select>
          </div>
        </div>
        
        <div class="space-y-2">
          <label class="flex items-center p-2 border rounded-lg hover:bg-gray-50 cursor-pointer">
            <input type="checkbox" name="combinations[${comboId}][unlimited_stills]" value="1" class="mr-3 rounded text-blue-600 focus:ring-blue-500 combination-unlimited-stills" data-combo="${comboId}">
            <span class="text-sm">Unlimited Stills (+15%)</span>
          </label>
          <label class="flex items-center p-2 border rounded-lg hover:bg-gray-50 cursor-pointer">
            <input type="checkbox" name="combinations[${comboId}][unlimited_versions]" value="1" class="mr-3 rounded text-blue-600 focus:ring-blue-500 combination-unlimited-versions" data-combo="${comboId}">
            <span class="text-sm">Unlimited Versions (+15%)</span>
          </label>
        </div>
      </div>
    `;
    
    return content;
  }

  // Initialize first combination as active
  switchToCombination(1);

  // Territory search functionality for combinations
  document.addEventListener('input', function(e) {
    if (e.target.classList.contains('territory-search')) {
      const comboId = e.target.getAttribute('data-combo');
      const searchTerm = e.target.value.toLowerCase();
      const territoriesList = document.querySelector(`.territories-list[data-combo="${comboId}"]`);
      
      if (territoriesList) {
        const territoryItems = territoriesList.querySelectorAll('.territory-item');
        
        if (searchTerm.length >= 3) {
          territoryItems.forEach(item => {
            const territoryName = item.dataset.name;
            if (territoryName && territoryName.includes(searchTerm)) {
              item.style.display = 'flex';
            } else {
              item.style.display = 'none';
            }
          });
        } else {
          territoryItems.forEach(item => {
            item.style.display = 'flex';
          });
        }
      }
    }
  });


  // Media multiplier calculation function for a specific combination (matching controller logic)
  function calculateMediaMultiplierForCombo(comboId) {
    const selected = document.querySelectorAll(`input[name="combinations[${comboId}][media_types][]"]:checked`);
    const allMediaSelected = document.querySelector(`input[name="combinations[${comboId}][media_types][]"][value="all_media"]:checked`);
    const allMovingSelected = document.querySelector(`input[name="combinations[${comboId}][media_types][]"][value="all_moving"]:checked`);
    const allPrintSelected = document.querySelector(`input[name="combinations[${comboId}][media_types][]"][value="print"]:checked`);
    let multiplier = 1.0;
    
    if (allMediaSelected) {
      multiplier = 1.0; // All Media = 100%
    } else if (allMovingSelected && allPrintSelected) {
      // All Moving + All Print should auto-select All Media, but just in case
      multiplier = 1.0; // = 100%
    } else if (allMovingSelected) {
      multiplier = 0.75; // All Moving Media = 75%
    } else if (allPrintSelected) {
      multiplier = 0.75; // All Print Media = 75%
    } else if (selected.length === 1) {
      multiplier = 0.5; // One individual media = 50%
    } else if (selected.length >= 3) {
      multiplier = 1.0; // Three or more individual media = 100%
    } else if (selected.length === 2) {
      multiplier = 0.75; // Two individual media = 75%
    } else {
      multiplier = 1.0; // No selection defaults to 100%
    }
    
    // Update the display for this combination
    const displayElement = document.querySelector(`.media-multiplier-display[data-combo="${comboId}"]`);
    if (displayElement) {
      displayElement.textContent = `${Math.round(multiplier * 100)}%`;
    }
    
    return multiplier;
  }

  // Duration multiplier calculation function for a specific combination
  function calculateDurationMultiplierForCombo(comboId) {
    const durationSelect = document.querySelector(`select[name="combinations[${comboId}][duration]"]`);
    if (!durationSelect || !durationSelect.value) {
      return 1.0; // Default multiplier
    }
    
    // Map duration values to multipliers using settings
    const durationMultipliers = {
      '3_months': <%= Setting.find_by(key: 'duration_3_months')&.typed_value || 50 %> / 100,
      '6_months': <%= Setting.find_by(key: 'duration_6_months')&.typed_value || 75 %> / 100,
      '12_months': <%= Setting.find_by(key: 'duration_12_months')&.typed_value || 100 %> / 100,
      '18_months': <%= Setting.find_by(key: 'duration_18_months')&.typed_value || 175 %> / 100,
      '24_months': <%= Setting.find_by(key: 'duration_24_months')&.typed_value || 200 %> / 100,
      '36_months': <%= Setting.find_by(key: 'duration_36_months')&.typed_value || 300 %> / 100
    };
    
    return durationMultipliers[durationSelect.value] || 1.0;
  }

  // Territory multiplier calculation function for a specific combination
  function calculateTerritoryMultiplierForCombo(comboId) {
    const selectedTerritories = document.querySelectorAll(`input[name="combinations[${comboId}][territories][]"]:checked`);
    let totalTerritoryPercentage = 0;
    
    selectedTerritories.forEach(checkbox => {
      const percentage = parseFloat(checkbox.dataset.percentage) || 0;
      totalTerritoryPercentage += percentage;
    });
    
    return totalTerritoryPercentage > 0 ? totalTerritoryPercentage / 100.0 : 1.0;
  }

  // Exclusivity multiplier calculation function for a specific combination
  function calculateExclusivityMultiplierForCombo(comboId) {
    const exclusivitySelect = document.querySelector(`select[name="combinations[${comboId}][exclusivity_type]"]`);
    if (!exclusivitySelect || !exclusivitySelect.value) {
      return 1.0;
    }
    
    const selectedOption = exclusivitySelect.selectedOptions[0];
    if (selectedOption) {
      const text = selectedOption.textContent;
      const percentageMatch = text.match(/\+(\d+)%/);
      if (percentageMatch) {
        const percentage = parseFloat(percentageMatch[1]) || 0;
        return 1 + (percentage / 100);
      }
    }
    
    return 1.0;
  }

  // Get all active combinations
  function getActiveCombinations() {
    const combinations = [];
    const allCombinations = document.querySelectorAll('.combination-content');
    
    allCombinations.forEach(combo => {
      const comboId = combo.getAttribute('data-combo');
      const durationSelect = document.querySelector(`select[name="combinations[${comboId}][duration]"]`);
      const selectedTerritories = document.querySelectorAll(`input[name="combinations[${comboId}][territories][]"]:checked`);
      const selectedMedia = document.querySelectorAll(`input[name="combinations[${comboId}][media_types][]"]:checked`);
      
      // Only include combinations that have at least duration, territory, or media selected
      if ((durationSelect && durationSelect.value) || selectedTerritories.length > 0 || selectedMedia.length > 0) {
        combinations.push({
          id: comboId,
          territoryMultiplier: calculateTerritoryMultiplierForCombo(comboId),
          mediaMultiplier: calculateMediaMultiplierForCombo(comboId),
          durationMultiplier: calculateDurationMultiplierForCombo(comboId),
          exclusivityMultiplier: calculateExclusivityMultiplierForCombo(comboId),
          unlimitedStills: document.querySelector(`input[name="combinations[${comboId}][unlimited_stills]"]:checked`) ? true : false,
          unlimitedVersions: document.querySelector(`input[name="combinations[${comboId}][unlimited_versions]"]:checked`) ? true : false,
          selectedTerritories: Array.from(selectedTerritories).map(t => t.dataset.territoryName),
          selectedMedia: Array.from(selectedMedia).map(m => m.value),
          duration: durationSelect ? durationSelect.value : ''
        });
      }
    });
    
    return combinations;
  }

  // Enhanced calculation and preview functionality for multiple combinations
  function updateQuotePreview() {
    let talentTotal = 0;
    let totalAdditionalFees = 0;
    
    const talentSummary = document.getElementById('talent-summary');
    const territorySummary = document.getElementById('territory-summary');
    
    // Clear summaries
    talentSummary.innerHTML = '';
    territorySummary.innerHTML = '';
    
    // Calculate talent costs from active talent categories
    const activeTalentSections = document.querySelectorAll('[id^="talent-category-"]:not(.hidden)');
    let hasTalent = false;
    let baseTalentFeesOnly = 0; // Just the base fees for usage calculation
    let talentCategoryBreakdown = []; // Store breakdown for usage calculation
    
    activeTalentSections.forEach(section => {
      const categoryId = section.id.replace('talent-category-', '');
      const categoryName = section.querySelector('h4').textContent;
      
      // Get the category total (includes base + standby + overtime)
      const categoryTotalElement = section.querySelector(`#category-total-${categoryId}`);
      if (categoryTotalElement) {
        const totalText = categoryTotalElement.textContent.replace(/[R,]/g, '');
        const categoryTotal = parseInt(totalText) || 0;
        
        if (categoryTotal > 0) {
          hasTalent = true;
          talentTotal += categoryTotal;
          
          // Calculate just the base fees (combination totals) for usage calculation
          const combinationTotals = section.querySelectorAll('.combination-total');
          let categoryBaseFees = 0;
          combinationTotals.forEach(total => {
            const value = total.textContent.replace(/[R,]/g, '');
            categoryBaseFees += parseInt(value) || 0;
          });
          
          if (categoryBaseFees > 0) {
            baseTalentFeesOnly += categoryBaseFees;
            talentCategoryBreakdown.push({
              id: categoryId,
              name: categoryName,
              baseFees: categoryBaseFees
            });
          }
          
          const summaryItem = document.createElement('div');
          summaryItem.className = 'flex justify-between';
          summaryItem.innerHTML = `
            <span class="text-sm">${categoryName}</span>
            <span>R ${categoryTotal.toLocaleString()}</span>
          `;
          talentSummary.appendChild(summaryItem);
        }
      }
    });
    
    if (!hasTalent) {
      talentSummary.innerHTML = '<div class="text-gray-500 italic">No talent selected</div>';
    }
    
    // Get all active combinations
    const activeCombinations = getActiveCombinations();
    
    // Update territory summary with all combinations
    let allTerritoryNames = [];
    activeCombinations.forEach(combo => {
      allTerritoryNames = [...allTerritoryNames, ...combo.selectedTerritories];
    });
    
    if (allTerritoryNames.length > 0) {
      // Remove duplicates and display
      const uniqueTerritories = [...new Set(allTerritoryNames)];
      uniqueTerritories.forEach(name => {
        const summaryItem = document.createElement('div');
        summaryItem.className = 'text-sm';
        summaryItem.innerHTML = name;
        territorySummary.appendChild(summaryItem);
      });
    } else {
      territorySummary.innerHTML = '<div class="text-gray-500 italic">No territories selected</div>';
    }
    
    // Get campaign type for adjustments
    const campaignTypeRadio = document.querySelector('input[name="quotation[product_type]"]:checked');
    const campaignType = campaignTypeRadio ? campaignTypeRadio.value : null;
    
    // Calculate Usage/Buyout for each combination (additive)
    let totalUsageBuyout = 0;
    const usageBreakdownHtml = [];
    
    if (activeCombinations.length > 0) {
      activeCombinations.forEach(combo => {
        const totalMultiplier = combo.territoryMultiplier * combo.mediaMultiplier * combo.durationMultiplier * combo.exclusivityMultiplier;
        let comboUsageTotal = 0;
        
        usageBreakdownHtml.push(`<div class="font-medium text-gray-800 mt-2">Combo ${combo.id}:</div>`);
        
        talentCategoryBreakdown.forEach(category => {
          let categoryUsage = category.baseFees * totalMultiplier;
          let adjustmentText = '';
          
          // Apply campaign type adjustments
          if (campaignType === 'adult' && category.id === '5') { // Kid category
            categoryUsage *= 0.5; // 50% reduction for adult campaigns
            adjustmentText = ' × 50% (Adult)';
          } else if (campaignType === 'family' && category.id === '5') { // Kid category  
            categoryUsage *= 0.75; // 25% reduction for family campaigns
            adjustmentText = ' × 75% (Family)';
          }
          
          if (categoryUsage > 0) {
            comboUsageTotal += categoryUsage;
            
            usageBreakdownHtml.push(`
              <div class="flex justify-between ml-4 text-xs">
                <span>${category.name}: R${category.baseFees.toLocaleString()} × ${totalMultiplier.toFixed(2)}x${adjustmentText}</span>
                <span>R${Math.round(categoryUsage).toLocaleString()}</span>
              </div>
            `);
          }
        });
        
        totalUsageBuyout += comboUsageTotal;
        
        // Calculate additional fees for this combination
        let comboAdditionalFees = 0;
        if (combo.unlimitedStills) comboAdditionalFees += talentTotal * 0.15;
        if (combo.unlimitedVersions) comboAdditionalFees += talentTotal * 0.15;
        totalAdditionalFees += comboAdditionalFees;
        
        if (comboAdditionalFees > 0) {
          usageBreakdownHtml.push(`
            <div class="flex justify-between ml-4 text-xs text-blue-600">
              <span>Additional Options</span>
              <span>R${Math.round(comboAdditionalFees).toLocaleString()}</span>
            </div>
          `);
        }
      });
    } else {
      usageBreakdownHtml.push('<div class="text-gray-500 italic">No combinations configured</div>');
    }
    
    // A) Talent Fees = talentTotal (includes base + standby + overtime)
    const talentFees = talentTotal;
    
    // B) Usage/Buyout = Sum of all combinations
    const usageBuyoutTotal = totalUsageBuyout;
    
    // C) Total = A + B + Additional Options
    const totalQuote = talentFees + usageBuyoutTotal + totalAdditionalFees;
    
    // Update display with aggregated values
    const avgTerritoryMultiplier = activeCombinations.length > 0 ? 
      activeCombinations.reduce((sum, combo) => sum + combo.territoryMultiplier, 0) / activeCombinations.length : 1.0;
    const avgMediaMultiplier = activeCombinations.length > 0 ? 
      activeCombinations.reduce((sum, combo) => sum + combo.mediaMultiplier, 0) / activeCombinations.length : 1.0;
    const avgDurationMultiplier = activeCombinations.length > 0 ? 
      activeCombinations.reduce((sum, combo) => sum + combo.durationMultiplier, 0) / activeCombinations.length : 1.0;
    const avgExclusivityMultiplier = activeCombinations.length > 0 ? 
      activeCombinations.reduce((sum, combo) => sum + combo.exclusivityMultiplier, 0) / activeCombinations.length : 1.0;
    
    document.getElementById('talent-total').textContent = `R ${talentFees.toLocaleString()}.00`;
    document.getElementById('territory-multiplier').textContent = `${avgTerritoryMultiplier.toFixed(2)}x (avg)`;
    document.getElementById('media-display-multiplier').textContent = `${avgMediaMultiplier.toFixed(2)}x (avg)`;
    document.getElementById('duration-multiplier').textContent = `${avgDurationMultiplier.toFixed(2)}x (avg)`;
    document.getElementById('exclusivity-multiplier').textContent = avgExclusivityMultiplier > 1 ? `+${Math.round((avgExclusivityMultiplier - 1) * 100)}% (avg)` : '+0%';
    document.getElementById('usage-buyout-total').textContent = `R ${Math.round(usageBuyoutTotal).toLocaleString()}.00`;
    document.getElementById('usage-buyout-breakdown').innerHTML = usageBreakdownHtml.join('');
    document.getElementById('additional-fees').textContent = `R ${totalAdditionalFees.toLocaleString()}.00`;
    document.getElementById('total-quote').textContent = `R ${Math.round(totalQuote).toLocaleString()}.00`;
    document.getElementById('current-total').textContent = `R ${Math.round(totalQuote).toLocaleString()}.00`;
  }
  
  // Add CSS for combination content visibility
  const style = document.createElement('style');
  style.textContent = `
    .combination-content {
      display: none;
    }
    .combination-content.active {
      display: block;
    }
  `;
  document.head.appendChild(style);

  // Media types mutual exclusion logic (matching quotation_form_controller.js exactly)
  function handleMediaTypeChange(comboId, changedInput) {
    const allInputs = document.querySelectorAll(`input[name="combinations[${comboId}][media_types][]"]`);
    const allMediaCheckbox = document.querySelector(`input[name="combinations[${comboId}][media_types][]"][value="all_media"]`);
    const allMovingCheckbox = document.querySelector(`input[name="combinations[${comboId}][media_types][]"][value="all_moving"]`);
    const allPrintCheckbox = document.querySelector(`input[name="combinations[${comboId}][media_types][]"][value="print"]`);
    const tvCheckbox = document.querySelector(`input[name="combinations[${comboId}][media_types][]"][value="tv"]`);
    const internetCheckbox = document.querySelector(`input[name="combinations[${comboId}][media_types][]"][value="internet"]`);
    const cinemaCheckbox = document.querySelector(`input[name="combinations[${comboId}][media_types][]"][value="cinema"]`);
    
    const value = changedInput.value;
    const isChecked = changedInput.checked;
    
    // If "All Media" is selected, uncheck and disable all others
    if (value === 'all_media' && isChecked) {
      document.querySelectorAll(`input[name="combinations[${comboId}][media_types][]"]:not([value="all_media"])`).forEach(otherCheckbox => {
        otherCheckbox.checked = false;
        otherCheckbox.disabled = true;
        otherCheckbox.closest('label').classList.add('opacity-50', 'cursor-not-allowed');
      });
    }
    // If "All Media" is unchecked, enable all others and uncheck everything
    else if (value === 'all_media' && !isChecked) {
      document.querySelectorAll(`input[name="combinations[${comboId}][media_types][]"]:not([value="all_media"])`).forEach(otherCheckbox => {
        otherCheckbox.checked = false;
        otherCheckbox.disabled = false;
        otherCheckbox.closest('label').classList.remove('opacity-50', 'cursor-not-allowed');
      });
    }
    // If "All Moving Media" is selected
    else if (value === 'all_moving' && isChecked) {
      // Auto-check TV, Internet, Cinema
      if (tvCheckbox) tvCheckbox.checked = true;
      if (internetCheckbox) internetCheckbox.checked = true;
      if (cinemaCheckbox) cinemaCheckbox.checked = true;
      
      // Disable All Print Media and All Media
      if (allPrintCheckbox) {
        allPrintCheckbox.disabled = true;
        allPrintCheckbox.closest('label').classList.add('opacity-50', 'cursor-not-allowed');
      }
      if (allMediaCheckbox) {
        allMediaCheckbox.disabled = true;
        allMediaCheckbox.closest('label').classList.add('opacity-50', 'cursor-not-allowed');
      }
    }
    // If "All Moving Media" is unchecked
    else if (value === 'all_moving' && !isChecked) {
      // Uncheck TV, Internet, Cinema
      if (tvCheckbox) tvCheckbox.checked = false;
      if (internetCheckbox) internetCheckbox.checked = false;
      if (cinemaCheckbox) cinemaCheckbox.checked = false;
      
      // Re-enable All Print Media and All Media
      if (allPrintCheckbox) {
        allPrintCheckbox.disabled = false;
        allPrintCheckbox.closest('label').classList.remove('opacity-50', 'cursor-not-allowed');
      }
      if (allMediaCheckbox) {
        allMediaCheckbox.disabled = false;
        allMediaCheckbox.closest('label').classList.remove('opacity-50', 'cursor-not-allowed');
      }
    }
    // If "All Print Media" is selected
    else if (value === 'print' && isChecked) {
      // Auto-check Internet
      if (internetCheckbox) internetCheckbox.checked = true;
      
      // Disable All Moving Media, individual moving options, and All Media
      if (allMovingCheckbox) {
        allMovingCheckbox.disabled = true;
        allMovingCheckbox.closest('label').classList.add('opacity-50', 'cursor-not-allowed');
      }
      if (tvCheckbox) {
        tvCheckbox.disabled = true;
        tvCheckbox.closest('label').classList.add('opacity-50', 'cursor-not-allowed');
      }
      if (cinemaCheckbox) {
        cinemaCheckbox.disabled = true;
        cinemaCheckbox.closest('label').classList.add('opacity-50', 'cursor-not-allowed');
      }
      if (allMediaCheckbox) {
        allMediaCheckbox.disabled = true;
        allMediaCheckbox.closest('label').classList.add('opacity-50', 'cursor-not-allowed');
      }
    }
    // If "All Print Media" is unchecked
    else if (value === 'print' && !isChecked) {
      // Uncheck Internet
      if (internetCheckbox) internetCheckbox.checked = false;
      
      // Re-enable All Moving Media, individual moving options, and All Media
      if (allMovingCheckbox) {
        allMovingCheckbox.disabled = false;
        allMovingCheckbox.closest('label').classList.remove('opacity-50', 'cursor-not-allowed');
      }
      if (tvCheckbox) {
        tvCheckbox.disabled = false;
        tvCheckbox.closest('label').classList.remove('opacity-50', 'cursor-not-allowed');
      }
      if (cinemaCheckbox) {
        cinemaCheckbox.disabled = false;
        cinemaCheckbox.closest('label').classList.remove('opacity-50', 'cursor-not-allowed');
      }
      if (allMediaCheckbox) {
        allMediaCheckbox.disabled = false;
        allMediaCheckbox.closest('label').classList.remove('opacity-50', 'cursor-not-allowed');
      }
    }
    // Handle TV, Internet, Cinema individual selections
    else if (['tv', 'internet', 'cinema'].includes(value)) {
      const tvChecked = tvCheckbox && tvCheckbox.checked;
      const internetChecked = internetCheckbox && internetCheckbox.checked;
      const cinemaChecked = cinemaCheckbox && cinemaCheckbox.checked;
      
      // Special case: If "All Print Media" was checked but user unchecks Internet
      if (value === 'internet' && allPrintCheckbox && allPrintCheckbox.checked && !internetChecked) {
        allPrintCheckbox.checked = false;
        // Re-enable All Moving Media, individual moving options, and All Media
        if (allMovingCheckbox) {
          allMovingCheckbox.disabled = false;
          allMovingCheckbox.closest('label').classList.remove('opacity-50', 'cursor-not-allowed');
        }
        if (tvCheckbox) {
          tvCheckbox.disabled = false;
          tvCheckbox.closest('label').classList.remove('opacity-50', 'cursor-not-allowed');
        }
        if (cinemaCheckbox) {
          cinemaCheckbox.disabled = false;
          cinemaCheckbox.closest('label').classList.remove('opacity-50', 'cursor-not-allowed');
        }
        if (allMediaCheckbox) {
          allMediaCheckbox.disabled = false;
          allMediaCheckbox.closest('label').classList.remove('opacity-50', 'cursor-not-allowed');
        }
      }
      // If user manually selects all three, auto-check "All Moving Media"
      else if (tvChecked && internetChecked && cinemaChecked && allMovingCheckbox && !allMovingCheckbox.checked) {
        allMovingCheckbox.checked = true;
        // Disable All Print Media and All Media
        if (allPrintCheckbox) {
          allPrintCheckbox.disabled = true;
          allPrintCheckbox.closest('label').classList.add('opacity-50', 'cursor-not-allowed');
        }
        if (allMediaCheckbox) {
          allMediaCheckbox.disabled = true;
          allMediaCheckbox.closest('label').classList.add('opacity-50', 'cursor-not-allowed');
        }
      } 
      // If "All Moving Media" was checked but user unchecks one of TV/Internet/Cinema
      else if (allMovingCheckbox && allMovingCheckbox.checked && !(tvChecked && internetChecked && cinemaChecked)) {
        allMovingCheckbox.checked = false;
        // Re-enable All Print Media and All Media
        if (allPrintCheckbox) {
          allPrintCheckbox.disabled = false;
          allPrintCheckbox.closest('label').classList.remove('opacity-50', 'cursor-not-allowed');
        }
        if (allMediaCheckbox) {
          allMediaCheckbox.disabled = false;
          allMediaCheckbox.closest('label').classList.remove('opacity-50', 'cursor-not-allowed');
        }
      }
    }
    // If any other checkbox is selected, uncheck "All Media"
    else if (value !== 'all_media' && isChecked && allMediaCheckbox) {
      allMediaCheckbox.checked = false;
    }
    
    calculateMediaMultiplierForCombo(comboId);
  }

  // Territory tags management
  function updateTerritoryTags(comboId) {
    const tagsContainer = document.querySelector(`.selected-territory-tags[data-combo="${comboId}"]`);
    const selectedTerritories = document.querySelectorAll(`input[name="combinations[${comboId}][territories][]"]:checked`);
    
    if (!tagsContainer) return;
    
    tagsContainer.innerHTML = '';
    
    selectedTerritories.forEach(checkbox => {
      const territoryName = checkbox.dataset.territoryName;
      const territoryId = checkbox.dataset.territoryId;
      
      const tag = document.createElement('span');
      tag.className = 'inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800';
      tag.innerHTML = `
        ${territoryName}
        <button type="button" class="ml-2 inline-flex items-center justify-center w-4 h-4 text-blue-400 hover:text-blue-600" onclick="removeTerritoryTag('${comboId}', '${territoryId}')">
          <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
          </svg>
        </button>
      `;
      tagsContainer.appendChild(tag);
    });
  }

  // Remove territory tag function
  function removeTerritoryTag(comboId, territoryId) {
    const checkbox = document.querySelector(`input[name="combinations[${comboId}][territories][]"][value="${territoryId}"]`);
    if (checkbox) {
      checkbox.checked = false;
      updateTerritoryTags(comboId);
      updateQuotePreview();
    }
  }

  // Global function to be accessible from onclick
  window.removeTerritoryTag = removeTerritoryTag;

  // Update preview when form values change
  document.addEventListener('input', function(e) {
    // Update media multiplier displays for combinations
    if (e.target.classList.contains('combination-media')) {
      const comboId = e.target.getAttribute('data-combo');
      calculateMediaMultiplierForCombo(comboId);
    }
    
    updateQuotePreview();
    
  });
  
  document.addEventListener('change', function(e) {
    // Handle media type changes
    if (e.target.classList.contains('combination-media')) {
      const comboId = e.target.getAttribute('data-combo');
      handleMediaTypeChange(comboId, e.target);
    }
    
    // Handle territory checkbox changes
    if (e.target.classList.contains('combination-territory-checkbox')) {
      const comboId = e.target.getAttribute('data-combo');
      updateTerritoryTags(comboId);
    }
    
    updateQuotePreview();
    
  });
  
  // Scroll spy to update sidebar
  window.addEventListener('scroll', function() {
    let current = '';
    sections.forEach(section => {
      const sectionTop = section.offsetTop;
      const sectionHeight = section.clientHeight;
      if (window.pageYOffset >= sectionTop - 200) {
        current = section.getAttribute('id');
      }
    });
    
    sidebarItems.forEach(item => {
      item.classList.remove('font-medium', 'text-blue-600');
      item.classList.add('text-gray-700');
      if (item.dataset.section === current) {
        item.classList.add('font-medium', 'text-blue-600');
        item.classList.remove('text-gray-700');
      }
    });
  });
  
  // Handle talent category selection
  document.querySelectorAll('.talent-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const categoryId = this.dataset.category;
      const section = document.getElementById(`talent-category-${categoryId}`);
      
      if (this.classList.contains('border-blue-500')) {
        // Remove category
        section.classList.add('hidden');
        this.classList.remove('border-blue-500', 'bg-blue-50');
        this.classList.add('border-gray-300');
      } else {
        // Add category
        section.classList.remove('hidden');
        this.classList.add('border-blue-500', 'bg-blue-50');
        this.classList.remove('border-gray-300');
      }
      
      updateQuotePreview();
    });
  });

  // Handle night button functionality
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('night-btn')) {
      const categoryId = e.target.dataset.category;
      const isActive = e.target.dataset.active === 'true';
      
      // Toggle active state
      e.target.dataset.active = isActive ? 'false' : 'true';
      
      if (e.target.dataset.active === 'true') {
        e.target.classList.add('bg-yellow-100', 'border-yellow-400', 'text-yellow-800');
        e.target.classList.remove('border-gray-300');
      } else {
        e.target.classList.remove('bg-yellow-100', 'border-yellow-400', 'text-yellow-800');
        e.target.classList.add('border-gray-300');
      }
      
      // Update hidden field
      const hiddenField = e.target.parentElement.querySelector(`[data-night-field="${categoryId}"]`);
      if (hiddenField) {
        hiddenField.value = e.target.dataset.active;
      }
      
      updateQuotePreview();
    }
  });

  // Handle all input changes for talent calculations
  document.addEventListener('input', function(e) {
    // Update media multiplier displays for combinations
    if (e.target.classList.contains('combination-media')) {
      const comboId = e.target.getAttribute('data-combo');
      calculateMediaMultiplierForCombo(comboId);
    }
    
    // Handle talent input changes
    if (e.target.hasAttribute('data-talent-input') || 
        e.target.hasAttribute('data-adjusted-rate-input') ||
        e.target.hasAttribute('data-days-input') ||
        e.target.hasAttribute('data-rehearsal-input') ||
        e.target.hasAttribute('data-down-input') ||
        e.target.hasAttribute('data-travel-input') ||
        e.target.hasAttribute('data-overtime-input')) {
      
      const categoryId = e.target.dataset.talentInput || 
                        e.target.dataset.adjustedRateInput ||
                        e.target.dataset.daysInput ||
                        e.target.dataset.rehearsalInput ||
                        e.target.dataset.downInput ||
                        e.target.dataset.travelInput ||
                        e.target.dataset.overtimeInput;
      
      if (categoryId) {
        updateCategoryTotal(categoryId);
      }
    }
    
    updateQuotePreview();
  });

  // Calculate category totals for talent
  function updateCategoryTotal(categoryId) {
    const section = document.getElementById(`talent-category-${categoryId}`);
    if (!section || section.classList.contains('hidden')) return;
    
    const talentCount = parseInt(section.querySelector(`[data-talent-input="${categoryId}"]`)?.value) || 0;
    const adjustedRate = parseInt(section.querySelector(`[data-adjusted-rate-input="${categoryId}"]`)?.value) || 0;
    const days = parseInt(section.querySelector(`[data-days-input="${categoryId}"]`)?.value) || 0;
    const rehearsal = parseInt(section.querySelector(`[data-rehearsal-input="${categoryId}"]`)?.value) || 0;
    const downDays = parseInt(section.querySelector(`[data-down-input="${categoryId}"]`)?.value) || 0;
    const travelDays = parseInt(section.querySelector(`[data-travel-input="${categoryId}"]`)?.value) || 0;
    const overtime = parseFloat(section.querySelector(`[data-overtime-input="${categoryId}"]`)?.value) || 0;
    
    // Check night premium
    const nightBtn = section.querySelector(`.night-btn[data-category="${categoryId}"]`);
    const nightPremium = nightBtn && nightBtn.dataset.active === 'true';
    
    let total = 0;
    
    // Base calculation
    total += talentCount * adjustedRate * days;
    
    // Rehearsal at 50%
    total += talentCount * adjustedRate * 0.5 * rehearsal;
    
    // Down days at 50%
    total += talentCount * adjustedRate * 0.5 * downDays;
    
    // Travel days at 50%
    total += talentCount * adjustedRate * 0.5 * travelDays;
    
    // Overtime at 10% per hour
    total += talentCount * adjustedRate * 0.1 * overtime;
    
    // Night premium at 50% (applies to first shoot day only)
    if (nightPremium) {
      total += talentCount * adjustedRate * 0.5;
    }
    
    // Update display
    const totalElement = section.querySelector(`#category-total-${categoryId}`);
    if (totalElement) {
      totalElement.textContent = `R${total.toLocaleString()}`;
    }
    
    updateQuotePreview();
  }

  // Initial calculation
  updateQuotePreview();
});

// Action button functions
function saveDraft() {
  // Add a hidden field to indicate draft status
  const form = document.querySelector('form');
  const draftField = document.createElement('input');
  draftField.type = 'hidden';
  draftField.name = 'save_as_draft';
  draftField.value = '1';
  form.appendChild(draftField);
  
  // Submit the form
  form.submit();
}

function previewQuote() {
  // Open preview in new window/tab
  const form = document.querySelector('form');
  const formData = new FormData(form);
  
  // You can implement preview logic here
  alert('Preview functionality will open quote preview in new window');
  
  // Or redirect to preview page
  // window.open('/quotations/preview?' + new URLSearchParams(formData).toString(), '_blank');
}

// Handle talent category selection
document.querySelectorAll('.talent-btn').forEach(btn => {
  btn.addEventListener('click', function() {
    const categoryId = this.dataset.category;
    const section = document.getElementById(`talent-category-${categoryId}`);
    
    if (this.classList.contains('border-blue-500')) {
      // Remove category
      section.classList.add('hidden');
      this.classList.remove('border-blue-500', 'bg-blue-50');
      this.classList.add('border-gray-300');
    } else {
      // Add category
      section.classList.remove('hidden');
      this.classList.add('border-blue-500', 'bg-blue-50');
      this.classList.remove('border-gray-300');
    }
    
    updateQuotePreview();
  });
});

// Handle rate adjustment plus/minus buttons
document.querySelectorAll('.rate-plus-btn, .rate-minus-btn').forEach(btn => {
  btn.addEventListener('click', function() {
    const categoryId = this.dataset.category;
    const adjustmentInput = document.querySelector(`[data-rate-adjustment-input="${categoryId}"]`);
    const currentValue = parseInt(adjustmentInput.value) || 0;
    const isPlus = this.classList.contains('rate-plus-btn');
    const increment = 100; // R100 increments
    
    const newValue = isPlus ? currentValue + increment : currentValue - increment;
    adjustmentInput.value = newValue;
    
    updateAdjustedRate(categoryId);
    updateCategoryTotal(categoryId);
    updateQuotePreview();
  });
});

function updateAdjustedRate(categoryId) {
  const baseRates = {
    1: <%= Setting.find_by(key: 'lead_base_rate')&.typed_value || 0 %>,
    2: <%= Setting.find_by(key: 'second_lead_base_rate')&.typed_value || 0 %>,
    3: <%= Setting.find_by(key: 'featured_extra_base_rate')&.typed_value || 0 %>,
    4: <%= Setting.find_by(key: 'teenager_base_rate')&.typed_value || 0 %>,
    5: <%= Setting.find_by(key: 'kid_base_rate')&.typed_value || 0 %>,
    6: <%= Setting.find_by(key: 'walk_on_base_rate')&.typed_value || 0 %>
  };
  
  const adjustmentInput = document.querySelector(`[data-rate-adjustment-input="${categoryId}"]`);
  const adjustment = parseInt(adjustmentInput.value) || 0;
  const baseRate = baseRates[categoryId] || 0;
  const adjustedRate = baseRate + adjustment;
  
  const adjustedRateElement = document.getElementById(`adjusted-rate-${categoryId}`);
  if (adjustedRateElement) {
    const adjustmentText = adjustment >= 0 ? `+R${adjustment}` : `-R${Math.abs(adjustment)}`;
    adjustedRateElement.textContent = `${adjustmentText} = R${adjustedRate.toLocaleString()}`;
  }
  
  return adjustedRate;
}

</script>